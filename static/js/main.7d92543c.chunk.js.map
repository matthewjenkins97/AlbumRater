{"version":3,"sources":["components/albumrater.js","App.js","serviceWorker.js","index.js"],"names":["AlbumRater","props","calculate","bind","a","MGMT_TOKEN_URL","SPOTIFY_SEARCH_URL","SPOTIFY_USER_URL","this","auth0","user","getAccessTokenSilently","document","getElementById","innerHTML","userToken","fetch","sub","headers","Authorization","json","mgmtUserInfo","searchParams","q","value","type","limit","URLSearchParams","accessToken","spotifySearchInfo","album","albums","items","offsetVal","spotifyUserLikes","spotifyUserInfo","userParams","offset","length","likedTrackDurations","page","item","track","name","duration_ms","id","spotifyTrackInfo","totalTrackDurations","isNaN","Math","round","isAuthenticated","logout","loginWithRedirect","style","float","htmlFor","onClick","returnTo","window","location","origin","React","Component","withAuth0","App","href","Boolean","hostname","match","ReactDOM","render","basename","process","domain","clientId","redirectUri","audience","scope","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4UAGMA,E,kDAOJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAGDC,UAAY,EAAKA,UAAUC,KAAf,gBAJA,E,oFAWnB,gFAAAC,EAAA,6DAIQC,EAAiB,kDACjBC,EAAqB,qCACrBC,EAAmB,yCAN3B,EAO2CC,KAAKP,MAAMQ,MAA5CC,EAPV,EAOUA,KAAMC,EAPhB,EAOgBA,uBAEdC,SAASC,eAAe,mBAAmBC,UAAY,oBATzD,SAa0BH,IAb1B,cAaQI,EAbR,iBAcoCC,MAAM,GAAD,OAAIX,GAAJ,OAAqBK,EAAKO,KAAO,CACtEC,QAAS,CACPC,cAAc,UAAD,OAAYJ,MAhB/B,gCAkBMK,OAlBN,eAcQC,EAdR,OAwBQC,EAAe,CACnBC,EAAE,GAAD,OAAKX,SAASC,eAAe,SAASW,MAAtC,YAA+CZ,SAASC,eAAe,UAAUW,OAClFC,KAAM,QACNC,MAAO,GA3BX,UA6ByCV,MAAM,GAAD,OAAIV,GAAJ,OAAyB,IAAIqB,gBAAgBL,IAAiB,CACxGJ,QAAS,CACPC,cAAc,UAAD,OAAYE,EAAaO,gBA/B5C,gCAiCMR,OAjCN,QA6BQS,EA7BR,OAkCQC,EAAQD,EAAkBE,OAAOC,MAAM,GAKzCC,EAAY,EACZC,EAAmB,GACnBC,EAAkB,GAzCxB,eA4CUC,EAAa,CACjBV,MAAO,GACPW,OAAoB,GAAZJ,GA9Cd,UAgDmCjB,MAAM,GAAD,OAAIT,GAAJ,OAAuB,IAAIoB,gBAAgBS,IAAe,CAC5FlB,QAAS,CACPC,cAAc,UAAD,OAAYE,EAAaO,gBAlD9C,gCAoDQR,OApDR,QAuDyC,KAPrCe,EAhDJ,QAuDwBH,MAAMM,SACxBJ,EAAiBD,GAAaE,GAIhCF,IA5DJ,WA+D4C,IAAjCE,EAAgBH,MAAMM,OA/DjC,yBAkEMC,EAAsB,EAlE5B,MAmEmBL,EAnEnB,0CAmEWM,EAnEX,mBAoEqBA,EAAKR,OApE1B,IAoEI,4BAASS,EAAoB,SAClBC,MAAMZ,MAAMa,OAASb,EAAMa,OAClCJ,EAAsBA,GAAuBE,EAAKC,MAAME,aAtEhE,+CA2EwC5B,MAAM,qCAAD,OAAsCc,EAAMe,GAA5C,WAAyD,CAClG3B,QAAS,CACPC,cAAc,UAAD,OAAYE,EAAaO,gBA7E5C,gCA+EMR,OA/EN,QA2EQ0B,EA3ER,OAkFMC,EAAsB,EAlF5B,cAmFmBD,EAAiBd,OAnFpC,IAmFE,2BAASS,EAAgC,QACvCM,EAAsBA,GAAuBN,EAAKG,YApFtD,8BAyFMI,MAAMC,KAAKC,MAAMX,EAAsBQ,IACzCnC,SAASC,eAAe,mBAAmBC,UAAY,GAEvDF,SAASC,eAAe,mBAAmBC,UAA3C,wBAAwEmC,KAAKC,MAAOX,EAAsBQ,EAAuB,IAAM,EAAvI,aA5FJ,6E,0EAsGA,WACE,MAAuDvC,KAAKP,MAAMQ,MAA1D0C,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,OAAQC,EAAjC,EAAiCA,kBACjC,OACE,6BACIF,EACA,6BACE,yBAAKG,MAAS,CAACC,MAAO,SACpB,2BAAOC,QAAQ,cAAf,YACA,2BAAO/B,KAAK,OAAOoB,GAAG,SAASF,KAAK,gBAEtC,4BAAQW,MAAO,CAACC,MAAO,SAAUE,QAAS,kBAAML,EAAO,CAACM,SAAUC,OAAOC,SAASC,WAAlF,UACA,6BACA,yBAAKP,MAAS,CAACC,MAAO,SACpB,2BAAOC,QAAQ,aAAf,WACA,2BAAO/B,KAAK,OAAOoB,GAAG,QAAQF,KAAK,eAErC,6BACA,4BAAQc,QAASjD,KAAKN,WAAtB,cACA,wBAAI2C,GAAG,qBAGT,6BACE,4BAAQY,QAAS,kBAAMJ,MAAvB,e,GA9IaS,IAAMC,WAsJhBC,cAAUhE,GCxIViE,MAbf,WACE,OACE,6BACE,2CACA,6BACA,kBAAC,EAAD,MACA,6BACA,sCAAW,uBAAGC,KAAK,qCAAR,sBAAX,8BAAwG,uBAAGA,KAAK,wBAAR,SAAxG,iBAA8J,uBAAGA,KAAK,0CAAR,kCAA9J,KACA,+HAAoG,uBAAGA,KAAK,gEAAR,eAApG,OCAcC,QACW,cAA7BR,OAAOC,SAASQ,UAEe,UAA7BT,OAAOC,SAASQ,UAEhBT,OAAOC,SAASQ,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,IAAD,CAAQC,SAAUC,sBAC9B,kBAAC,IAAD,CACIC,OAAO,4BACPC,SAAS,mCACTC,YAAajB,OAAOC,SAASC,OAC7BgB,SAAS,4CACTC,MAAM,0CAEN,kBAAC,EAAD,QAEGlE,SAASC,eAAe,SDiH7B,kBAAmBkE,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7d92543c.chunk.js","sourcesContent":["import React from 'react';\nimport { withAuth0 } from \"@auth0/auth0-react\";\n\nclass AlbumRater extends React.Component {\n  /**\n   * Represents an Album Rater object.\n   * @constructor\n   * @param {object} props - Props for the AlbumRater object (not used).\n   */\n\n  constructor(props) {\n    super(props);\n\n    // binds\n    this.calculate = this.calculate.bind(this);\n  }\n\n  /**\n   * Calculates the score.\n   * @method\n   */\n  async calculate() {\n    // calculates score based on number of seconds of each liked track over number of seconds of every track.\n    // let liked = 0;\n    // let total = 0;\n    const MGMT_TOKEN_URL = 'https://dev-06brcesa.us.auth0.com/api/v2/users/' ;\n    const SPOTIFY_SEARCH_URL = 'https://api.spotify.com/v1/search?';\n    const SPOTIFY_USER_URL = 'https://api.spotify.com/v1/me/tracks/?';\n    const { user, getAccessTokenSilently } = this.props.auth0;\n\n    document.getElementById('calculatedScore').innerHTML = 'Loading rating...';\n\n    // get user information via auth0\n    \n    const userToken = await getAccessTokenSilently();\n    const mgmtUserInfo = await (await fetch(`${MGMT_TOKEN_URL}${user.sub}`, {\n      headers: {\n        Authorization: `Bearer ${userToken}`\n      }\n    })).json();\n\n    // may need when debugging with postman\n    //console.log(mgmtUserInfo.accessToken);\n\n    // getting album by doing a search with the artist / album values\n    const searchParams = {\n      q: `${document.getElementById('album').value} ${document.getElementById('artist').value}`,\n      type: 'album',\n      limit: 1\n    }\n    const spotifySearchInfo = await (await fetch(`${SPOTIFY_SEARCH_URL}${new URLSearchParams(searchParams)}`, {\n      headers: {\n        Authorization: `Bearer ${mgmtUserInfo.accessToken}`\n      }\n    })).json();\n    const album = spotifySearchInfo.albums.items[0];\n    \n    // fetch user's likes and do a quick filter based on whether the likes are in the album mentioned\n    // sleep a half second, then do a call on the user's liked tracks list\n    // add object to spotifyUserLikes if spotifyUserInfo.items isn't empty\n    let offsetVal = 0;\n    let spotifyUserLikes = []\n    let spotifyUserInfo = {};\n    do {\n      // fetch tracks in batches of 50 tracks\n      const userParams = {\n        limit: 50,\n        offset: offsetVal * 50\n      };\n      spotifyUserInfo = await (await fetch(`${SPOTIFY_USER_URL}${new URLSearchParams(userParams)}`, {\n        headers: {\n          Authorization: `Bearer ${mgmtUserInfo.accessToken}`\n        }\n      })).json();\n\n      // add only if there are items in the items member of the object\n      if (spotifyUserInfo.items.length !== 0) {\n        spotifyUserLikes[offsetVal] = spotifyUserInfo;\n      }\n\n      // incrementing\n      offsetVal++;\n      // console.log(spotifyUserLikes);\n\n    } while (spotifyUserInfo.items.length !== 0);\n\n    // getting liked track lengths and adding them to a variable\n    let likedTrackDurations = 0;\n    for (let page of spotifyUserLikes) {\n      for (let item of page.items) {\n        if (item.track.album.name === album.name) {\n          likedTrackDurations = likedTrackDurations += item.track.duration_ms;\n      }\n    }\n\n    // getting all album tracks\n    const spotifyTrackInfo = await (await fetch(`https://api.spotify.com/v1/albums/${album.id}/tracks`, {\n      headers: {\n        Authorization: `Bearer ${mgmtUserInfo.accessToken}`\n      }\n    })).json();\n\n    //calculating total album length\n    let totalTrackDurations = 0;\n    for (let item of spotifyTrackInfo.items) {\n      totalTrackDurations = totalTrackDurations += item.duration_ms;\n    }\n\n    // // presenting the math\n    // // nothing is displayed if calculated score is NaN\n    if (isNaN(Math.round(likedTrackDurations / totalTrackDurations))) {\n      document.getElementById('calculatedScore').innerHTML = '';\n    } else {\n      document.getElementById('calculatedScore').innerHTML = `Album rating: ${Math.round((likedTrackDurations / totalTrackDurations) * 10) / 2} out of 5`;\n    }\n  }\n}\n\n  /**\n   * Renders object.\n   * @method\n   * @return {JSX}\n  */\n  render() {\n    const { isAuthenticated, logout, loginWithRedirect } = this.props.auth0;\n    return (\n      <div>\n        { isAuthenticated ?\n          <div>\n            <div style = {{float: 'left'}}>\n              <label htmlFor=\"artistname\">Artist: </label>\n              <input type=\"text\" id=\"artist\" name=\"artistname\"></input>\n            </div>\n            <button style={{float: 'right'}} onClick={() => logout({returnTo: window.location.origin })}>Logout</button>\n            <br />\n            <div style = {{float: 'left'}}>\n              <label htmlFor=\"albumname\">Album: </label>\n              <input type=\"text\" id=\"album\" name=\"albumname\"></input>\n            </div>\n            <br />\n            <button onClick={this.calculate}>Calculate!</button>\n            <h3 id='calculatedScore'></h3>\n          </div>\n          : \n          <div>\n            <button onClick={() => loginWithRedirect()}>Login</button>\n          </div>\n          }\n      </div>\n    );\n  };\n}\n\nexport default withAuth0(AlbumRater);","import React from 'react';\nimport './App.css';\nimport AlbumRater from './components/albumrater';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Album Rater</h1>\n      <hr />\n      <AlbumRater></AlbumRater>\n      <hr />\n      <p>Made by <a href=\"http://matthewjenkins97.github.io\">Matthew R. Jenkins</a> in 2021. Application uses <a href=\"https://reactjs.org/\">React</a> and CSS from <a href=\"http://bettermotherfuckingwebsite.com/\">bettermotherfuckingwebsite.com</a>.</p>\n      <p>Note that this is still in development! If you encounter any bugs feel free to report them on my <a href=\"https://github.com/matthewjenkins97/SpotifyAlbumRater/issues\">github page</a>.</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Auth0Provider } from \"@auth0/auth0-react\";\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>\n    <Auth0Provider\n        domain=\"dev-06brcesa.us.auth0.com\"\n        clientId=\"aExrjSgZXrCRZAcUVZ9Ol6w2P3nBkrue\"\n        redirectUri={window.location.origin}\n        audience=\"https://dev-06brcesa.us.auth0.com/api/v2/\"\n        scope=\"read:current_user read:user_idp_tokens\"\n    >\n        <App />\n    </Auth0Provider>\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}