{"version":3,"sources":["components/albumrater.js","App.js","serviceWorker.js","index.js"],"names":["AlbumRater","props","calculate","bind","a","MGMT_TOKEN_URL","SPOTIFY_SEARCH_URL","SPOTIFY_ALBUM_URL","SPOTIFY_USER_URL","this","auth0","user","getAccessTokenSilently","document","getElementById","innerHTML","value","userToken","fetch","sub","headers","Authorization","json","mgmtUserInfo","searchParams","q","type","limit","URLSearchParams","accessToken","undefined","spotifySearchInfo","albums","items","albumName","id","spotifyAlbumInfo","trackIds","tracks","track","push","ids","spotifyLikedTrackInfo","likedTrackDurations","totalTrackDurations","albumInfo","i","length","duration_ms","isNaN","Math","round","console","error","isAuthenticated","logout","loginWithRedirect","style","float","htmlFor","name","onClick","returnTo","window","location","origin","pathname","React","Component","withAuth0","App","href","Boolean","hostname","match","ReactDOM","render","basename","process","domain","clientId","redirectUri","audience","scope","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d202cd90.chunk.js","sourcesContent":["import React from 'react';\nimport { withAuth0 } from \"@auth0/auth0-react\";\n\nclass AlbumRater extends React.Component {\n  /**\n   * Represents an Album Rater object.\n   * @constructor\n   * @param {object} props - Props for the AlbumRater object (not used).\n   */\n\n  constructor(props) {\n    super(props);\n\n    // binds\n    this.calculate = this.calculate.bind(this);\n  }\n\n  /**\n   * Calculates the score.\n   * @method\n   */\n  async calculate() {\n    // calculates score based on number of seconds of each liked track over number of seconds of every track.\n    const MGMT_TOKEN_URL = 'https://dev-06brcesa.us.auth0.com/api/v2/users/' ;\n    const SPOTIFY_SEARCH_URL = 'https://api.spotify.com/v1/search?';\n    const SPOTIFY_ALBUM_URL = 'https://api.spotify.com/v1/albums/';\n    const SPOTIFY_USER_URL = 'https://api.spotify.com/v1/me/tracks/contains?';\n    const { user, getAccessTokenSilently } = this.props.auth0;\n\n    document.getElementById('calculatedScore').innerHTML = 'Loading rating...';\n\n    // quick error check\n    if (document.getElementById('album').value === \"\" || \n        document.getElementById('artist').value === \"\") {\n      document.getElementById('calculatedScore').innerHTML = 'Please fill in any missing data and try again.';\n      return;\n    }\n\n    // getting access token\n    const userToken = await getAccessTokenSilently();\n    const mgmtUserInfo = await (await fetch(`${MGMT_TOKEN_URL}${user.sub}`, {\n      headers: {\n        Authorization: `Bearer ${userToken}`\n      }\n    })).json();\n\n    // may need when debugging with postman\n    //console.log(mgmtUserInfo.accessToken);\n\n    try {\n      // getting album by doing a search with the artist / album values\n      let searchParams = {\n        q: `${document.getElementById('album').value} ${document.getElementById('artist').value}`,\n        type: 'album',\n        limit: 1\n      };\n\n      // getting search and album information from api\n      const spotifySearchInfo = await (await fetch(`${SPOTIFY_SEARCH_URL}${new URLSearchParams(searchParams)}`, {\n        headers: {\n          Authorization: `Bearer ${mgmtUserInfo.accessToken}`\n        }\n      })).json();\n\n      // quick catch to prevent error on next api call\n      if (spotifySearchInfo.albums.items[0] === undefined) {\n        document.getElementById('calculatedScore').innerHTML = 'Album not found.'        \n        return;\n      }\n\n      const albumName = spotifySearchInfo.albums.items[0].id;\n      const spotifyAlbumInfo = await (await fetch(`${SPOTIFY_ALBUM_URL}${albumName}`, {\n        headers: {\n          Authorization: `Bearer ${mgmtUserInfo.accessToken}`\n        }\n      })).json();\n\n      // getting tracks on the album that are liked by the user\n      const trackIds = [];\n      for (let track of spotifyAlbumInfo.tracks.items) {\n        trackIds.push(track.id);\n      }\n      searchParams = { ids: trackIds };\n      const spotifyLikedTrackInfo = await (await fetch(`${SPOTIFY_USER_URL}${new URLSearchParams(searchParams)}`, {\n        headers: {\n          Authorization: `Bearer ${mgmtUserInfo.accessToken}`\n        }\n      })).json();\n\n      //calculating liked track length and total album length\n      let likedTrackDurations = 0;\n      let totalTrackDurations = 0;\n      const albumInfo = spotifyAlbumInfo.tracks.items;\n      for (let i = 0; i < albumInfo.length; i++) {\n        if (spotifyLikedTrackInfo[i]) {\n          likedTrackDurations = likedTrackDurations += albumInfo[i].duration_ms;\n        }\n        totalTrackDurations = totalTrackDurations + albumInfo[i].duration_ms;\n      }\n\n      // presenting the math\n      // nothing is displayed if calculated score is NaN (though it shouldn't be in any case, i don't think)\n      if (isNaN(Math.round(likedTrackDurations / totalTrackDurations))) {\n        document.getElementById('calculatedScore').innerHTML = '';\n      } else {\n        document.getElementById('calculatedScore').innerHTML = `Album rating: ${Math.round((likedTrackDurations / totalTrackDurations) * 10) / 2} out of 5`;\n      }\n\n    // catching if the Spotify API token needs refreshing\n    } catch (e) {\n      console.error(e);\n      document.getElementById('calculatedScore').innerHTML = 'Something bad happened. Please logout and log in to refresh the authentication.';\n    }\n  }\n\n  /**\n   * Renders object.\n   * @method\n   * @return {JSX}\n  */\n  render() {\n    const { isAuthenticated, logout, loginWithRedirect } = this.props.auth0;\n    return (\n      <div>\n        { isAuthenticated ?\n          <div>\n            <div style = {{float: 'left'}}>\n              <label htmlFor=\"artistname\">Artist: </label>\n              <input type=\"text\" id=\"artist\" name=\"artistname\"></input>\n            </div>\n            <div style={{float: 'right'}}>\n              <button  onClick={() => logout({returnTo: window.location.origin + window.location.pathname })}>Logout</button>\n            </div>\n            <br />\n            <div style = {{float: 'left'}}>\n              <label htmlFor=\"albumname\">Album: </label>\n              <input type=\"text\" id=\"album\" name=\"albumname\"></input>\n            </div>\n            <br />\n            <button onClick={this.calculate}>Calculate!</button>\n            <h3 id='calculatedScore'></h3>\n          </div>\n          : \n          <div>\n            <button onClick={() => loginWithRedirect()}>Login</button>\n          </div>\n          }\n      </div>\n    );\n  };\n}\n\nexport default withAuth0(AlbumRater);","import React from 'react';\nimport './App.css';\nimport AlbumRater from './components/albumrater';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Album Rater</h1>\n      <hr />\n      <AlbumRater></AlbumRater>\n      <hr />\n      <p>Made by <a href=\"http://matthewjenkins97.github.io\">Matthew R. Jenkins</a> in 2021. Application uses <a href=\"https://reactjs.org/\">React</a> and CSS from <a href=\"http://bettermotherfuckingwebsite.com/\">bettermotherfuckingwebsite.com</a>.</p>\n      <p>Note that this is still in development! If you encounter any bugs feel free to report them on my <a href=\"https://github.com/matthewjenkins97/SpotifyAlbumRater/issues\">Github page</a>.</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Auth0Provider } from \"@auth0/auth0-react\";\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>\n    <Auth0Provider\n        domain=\"dev-06brcesa.us.auth0.com\"\n        clientId=\"aExrjSgZXrCRZAcUVZ9Ol6w2P3nBkrue\"\n        redirectUri={window.location.origin + window.location.pathname}\n        audience=\"https://dev-06brcesa.us.auth0.com/api/v2/\"\n        scope=\"read:current_user read:user_idp_tokens offline_access\"\n    >\n        <App />\n    </Auth0Provider>\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}