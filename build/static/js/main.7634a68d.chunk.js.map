{"version":3,"sources":["components/albumrater.js","components/spotifyalbumrater.js","App.js","serviceWorker.js","index.js"],"names":["AlbumRater","props","trackNumber","addTrack","bind","removeTrack","calculateTrad","liked","total","i","this","minutes","parseInt","document","getElementById","value","seconds","approval","checked","isNaN","alert","Math","round","innerHTML","node","createElement","id","append","forceUpdate","nodeID","remove","onClick","React","Component","SpotifyAlbumRater","calculateSpotify","a","MGMT_TOKEN_URL","SPOTIFY_SEARCH_URL","SPOTIFY_ALBUM_URL","SPOTIFY_USER_URL","auth0","user","getAccessTokenSilently","userToken","fetch","sub","headers","Authorization","json","mgmtUserInfo","console","log","accessToken","searchParams","q","type","limit","URLSearchParams","undefined","spotifySearchInfo","albums","items","albumName","spotifyAlbumInfo","trackIds","tracks","track","push","ids","spotifyLikedTrackInfo","likedTrackDurations","totalTrackDurations","albumInfo","length","duration_ms","error","isAuthenticated","logout","loginWithRedirect","style","float","htmlFor","name","returnTo","window","location","origin","pathname","withAuth0","App","class","href","Boolean","hostname","match","ReactDOM","render","basename","process","domain","clientId","redirectUri","audience","scope","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7634a68d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class AlbumRater extends React.Component {\r\n  /**\r\n   * Represents an Album Rater object. Creates an initial state with 0 tracks.\r\n   * @constructor\r\n   * @param {object} props - Props for the AlbumRater object (not used).\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // setting initial variables\r\n    this.trackNumber = 0;\r\n\r\n    // binds\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.calculateTrad = this.calculateTrad.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Calculates the score.\r\n   * @method\r\n   */\r\n  calculateTrad() {\r\n    // calculates score based on number of seconds of each liked track over number of seconds of every track.\r\n    let liked = 0;\r\n    let total = 0;\r\n\r\n    // calculating by every track provided in the <ol>\r\n    for (let i = 1; i < this.trackNumber + 1; i++) {\r\n      const minutes = parseInt(document.getElementById('trackMinutes' + i).value);\r\n      const seconds = parseInt(document.getElementById('trackSeconds' + i).value);\r\n      const approval = document.getElementById('trackApproval' + i).checked;\r\n\r\n      // edge guarding\r\n      // anything blank?\r\n      if (isNaN(minutes) || isNaN(seconds)) {\r\n        alert('Please fill any missing data.');\r\n        return;\r\n      }\r\n      // anything not positive?\r\n      if (minutes < 0 || seconds < 0) {\r\n        alert('Minutes or seconds cannot be negative numbers.');\r\n        return;\r\n      }\r\n      // seconds greater than 60?\r\n      if (seconds >= 60) {\r\n        alert('Number of seconds cannot be greater than 60.');\r\n        return;\r\n      }\r\n\r\n      // calculation\r\n      if (approval) {\r\n        liked += parseInt(minutes) * 60;\r\n        liked += parseInt(seconds);\r\n      }\r\n      total += parseInt(minutes) * 60;\r\n      total += parseInt(seconds);\r\n    }\r\n\r\n    // presenting the math\r\n    // nothing is displayed if calculated score is NaN\r\n    if (isNaN(Math.round(liked / total))) {\r\n      document.getElementById('calculatedScoreTrad').innerHTML = '';\r\n    } else {\r\n      document.getElementById('calculatedScoreTrad').innerHTML = `Album rating: ${Math.round((liked / total) * 10) / 2} out of 5`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a track to the ordered list.\r\n   * @method\r\n   */\r\n  addTrack() {\r\n    this.trackNumber += 1;\r\n\r\n    // creating node\r\n    const node = document.createElement('li');\r\n    node.id = 'track' + this.trackNumber;\r\n    node.innerHTML = `\r\n      <input id=trackMinutes${this.trackNumber} type=number></input>\r\n      <input id=trackSeconds${this.trackNumber} type=number></input>\r\n      <input id=trackApproval${this.trackNumber} type=checkbox></input>\r\n    `;\r\n\r\n    // adding to track information in order to calculate\r\n    document.getElementById('trackList').append(node);\r\n\r\n    // refreshing widgets\r\n    this.forceUpdate();\r\n  }\r\n\r\n  /**\r\n   * Removes the last track from the ordered list.\r\n   * @method\r\n   */\r\n  removeTrack() {\r\n    // if track number > 0 you can remove and pop things, otherwise do nothing\r\n    if (this.trackNumber > 0) {\r\n      const nodeID = 'track' + this.trackNumber;\r\n      document.getElementById(nodeID).remove();\r\n    }\r\n\r\n    // set track number to 0\r\n    this.trackNumber = this.trackNumber > 0 ? this.trackNumber - 1: 0;\r\n\r\n    this.forceUpdate();\r\n  }\r\n\r\n  /**\r\n   * Renders object.\r\n   * @method\r\n   * @return {JSX}\r\n  */\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ol id=\"trackList\">\r\n        </ol>\r\n        <button onClick={this.addTrack}>+</button>\r\n        <button onClick={this.removeTrack}>-</button>\r\n        <br />\r\n        <button onClick={this.calculateTrad}>Calculate!</button>\r\n        <h3 id='calculatedScoreTrad'></h3>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { withAuth0 } from \"@auth0/auth0-react\";\r\n\r\nclass SpotifyAlbumRater extends React.Component {\r\n  /**\r\n   * Represents an Album Rater object.\r\n   * @constructor\r\n   * @param {object} props - Props for the AlbumRater object (not used).\r\n   */\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // binds\r\n    this.calculateSpotify = this.calculateSpotify.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Calculates the score.\r\n   * @method\r\n   */\r\n  async calculateSpotify() {\r\n    // calculates score based on number of seconds of each liked track over number of seconds of every track.\r\n    const MGMT_TOKEN_URL = 'https://dev-06brcesa.us.auth0.com/api/v2/users/' ;\r\n    const SPOTIFY_SEARCH_URL = 'https://api.spotify.com/v1/search?';\r\n    const SPOTIFY_ALBUM_URL = 'https://api.spotify.com/v1/albums/';\r\n    const SPOTIFY_USER_URL = 'https://api.spotify.com/v1/me/tracks/contains?';\r\n    const { user, getAccessTokenSilently } = this.props.auth0;\r\n\r\n    document.getElementById('calculatedScoreSpotify').innerHTML = 'Loading rating...';\r\n\r\n    // quick error check\r\n    if (document.getElementById('album').value === \"\" || \r\n        document.getElementById('artist').value === \"\") {\r\n      document.getElementById('calculatedScoreSpotify').innerHTML = 'Please fill in any missing data and try again.';\r\n      return;\r\n    }\r\n\r\n    // getting access token\r\n    const userToken = await getAccessTokenSilently();\r\n    const mgmtUserInfo = await (await fetch(`${MGMT_TOKEN_URL}${user.sub}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${userToken}`\r\n      }\r\n    })).json();\r\n\r\n    // may need when debugging with postman\r\n    console.log(mgmtUserInfo.accessToken);\r\n\r\n    try {\r\n      // getting album by doing a search with the artist / album values\r\n      let searchParams = {\r\n        q: `${document.getElementById('album').value} ${document.getElementById('artist').value}`,\r\n        type: 'album',\r\n        limit: 1\r\n      };\r\n\r\n      // getting search and album information from api\r\n      const spotifySearchInfo = await (await fetch(`${SPOTIFY_SEARCH_URL}${new URLSearchParams(searchParams)}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${mgmtUserInfo.accessToken}`\r\n        }\r\n      })).json();\r\n\r\n      // quick catch to prevent error on next api call\r\n      if (spotifySearchInfo.albums.items[0] === undefined) {\r\n        document.getElementById('calculatedScoreSpotify').innerHTML = 'Album not found.'        \r\n        return;\r\n      }\r\n\r\n      const albumName = spotifySearchInfo.albums.items[0].id;\r\n      const spotifyAlbumInfo = await (await fetch(`${SPOTIFY_ALBUM_URL}${albumName}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${mgmtUserInfo.accessToken}`\r\n        }\r\n      })).json();\r\n\r\n      // getting tracks on the album that are liked by the user\r\n      const trackIds = [];\r\n      for (let track of spotifyAlbumInfo.tracks.items) {\r\n        trackIds.push(track.id);\r\n      }\r\n      searchParams = { ids: trackIds };\r\n      const spotifyLikedTrackInfo = await (await fetch(`${SPOTIFY_USER_URL}${new URLSearchParams(searchParams)}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${mgmtUserInfo.accessToken}`\r\n        }\r\n      })).json();\r\n\r\n      //calculating liked track length and total album length\r\n      let likedTrackDurations = 0;\r\n      let totalTrackDurations = 0;\r\n      const albumInfo = spotifyAlbumInfo.tracks.items;\r\n      for (let i = 0; i < albumInfo.length; i++) {\r\n        if (spotifyLikedTrackInfo[i]) {\r\n          likedTrackDurations = likedTrackDurations += albumInfo[i].duration_ms;\r\n        }\r\n        totalTrackDurations = totalTrackDurations + albumInfo[i].duration_ms;\r\n      }\r\n\r\n      // presenting the math\r\n      // nothing is displayed if calculated score is NaN (though it shouldn't be in any case, i don't think)\r\n      if (isNaN(Math.round(likedTrackDurations / totalTrackDurations))) {\r\n        document.getElementById('calculatedScoreSpotify').innerHTML = '';\r\n      } else {\r\n        document.getElementById('calculatedScoreSpotify').innerHTML = `Album rating: ${Math.round((likedTrackDurations / totalTrackDurations) * 10) / 2} out of 5`;\r\n      }\r\n\r\n    // catching if the Spotify API token needs refreshing\r\n    } catch (e) {\r\n      console.error(e);\r\n      document.getElementById('calculatedScoreSpotify').innerHTML = 'Something bad happened. Please logout and log in to refresh the authentication.';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders object.\r\n   * @method\r\n   * @return {JSX}\r\n  */\r\n  render() {\r\n    const { isAuthenticated, logout, loginWithRedirect } = this.props.auth0;\r\n    return (\r\n      <div>\r\n        { isAuthenticated ?\r\n          <div>\r\n            <div style = {{float: 'left'}}>\r\n              <label htmlFor=\"artistname\">Artist: </label>\r\n              <input type=\"text\" id=\"artist\" name=\"artistname\"></input>\r\n            </div>\r\n            <div style={{float: 'right'}}>\r\n              <button  onClick={() => logout({returnTo: window.location.origin + window.location.pathname })}>Logout</button>\r\n            </div>\r\n            <br />\r\n            <div style = {{float: 'left'}}>\r\n              <label htmlFor=\"albumname\">Album: </label>\r\n              <input type=\"text\" id=\"album\" name=\"albumname\"></input>\r\n            </div>\r\n            <br />\r\n            <button onClick={this.calculateSpotify}>Calculate!</button>\r\n            <h3 id='calculatedScoreSpotify'></h3>\r\n          </div>\r\n          : \r\n          <div>\r\n            <button onClick={() => loginWithRedirect()}>Login</button>\r\n          </div>\r\n          }\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default withAuth0(SpotifyAlbumRater);","import React from 'react';\r\nimport './App.css';\r\nimport AlbumRater from './components/albumrater';\r\nimport SpotifyAlbumRater from './components/spotifyalbumrater';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h1>Album Rater</h1>\r\n      <hr />\r\n      <div class=\"grid-container\">\r\n        <div class=\"grid-child\">\r\n          <div class=\"grid-element\">\r\n            <h2>Traditional</h2>\r\n            <p>For each track on the album, type in its length in minutes and seconds, and whether you liked it or not. Your score will be automatically generated below the list.</p>\r\n            <AlbumRater></AlbumRater>\r\n          </div>\r\n        </div>\r\n        <div class=\"grid-child\">\r\n          <div class=\"grid-element\">\r\n            <h2>Spotify</h2>\r\n            <SpotifyAlbumRater></SpotifyAlbumRater>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <hr />\r\n      <p>Made by <a href=\"http://matthewjenkins97.github.io\">Matthew R. Jenkins</a> in 2023. Application uses <a href=\"https://reactjs.org/\">React</a> and CSS from <a href=\"http://bettermotherfuckingwebsite.com/\">bettermotherfuckingwebsite.com</a>.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { Auth0Provider } from \"@auth0/auth0-react\";\r\n\r\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>\r\n    <Auth0Provider\r\n        domain=\"dev-06brcesa.us.auth0.com\"\r\n        clientId=\"aExrjSgZXrCRZAcUVZ9Ol6w2P3nBkrue\"\r\n        redirectUri={window.location.origin + window.location.pathname}\r\n        audience=\"https://dev-06brcesa.us.auth0.com/api/v2/\"\r\n        scope=\"read:current_user read:user_idp_tokens offline_access\"\r\n    >\r\n        <App />\r\n    </Auth0Provider>\r\n</Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}